# Generated by Django 4.2.7 on 2024-06-19 05:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AffectedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(max_length=512, null=True)),
                ('product', models.CharField(max_length=2048, null=True)),
                ('collection_url', models.CharField(default=None, max_length=2048, null=True)),
                ('package_name', models.CharField(default=None, max_length=2048, null=True)),
                ('repo', models.CharField(default=None, max_length=2048, null=True)),
                ('default_status', models.CharField(choices=[('affected', 'affected'), ('unaffected', 'unaffected'), ('unknown', 'unknown')], default='unknown', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Cpe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=2048, null=True, validators=[django.core.validators.RegexValidator('([c][pP][eE]:/[AHOaho]?(:[A-Za-z0-9._\\-~%]*){0,6})|(cpe:2\\.3:[aho*\\-](:(((\\?*|\\*?)([a-zA-Z0-9\\-._]|(\\\\[\\\\*?!"#$%&\'()+,/:;<=>@\\[\\]\\^`{|}~]))+(\\?*|\\*?))|[*\\-])){5}(:(([a-zA-Z]{2,3}(-([a-zA-Z]{2}|[0-9]{3}))?)|[*\\-]))(:(((\\?*|\\*?)([a-zA-Z0-9\\-._]|(\\\\[\\\\*?!"#$%&\'()+,/:;<=>@\\[\\]\\^`{|}~]))+(\\?*|\\*?))|[*\\-])){4})')])),
            ],
        ),
        migrations.CreateModel(
            name='CveIngestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('valid_to', models.DateField()),
                ('delta', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CveRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('PUBLISHED', 'PUBLISHED'), ('REJECTED', 'REJECTED')], default='PUBLISHED', max_length=9)),
                ('cve_id', models.CharField(max_length=32, validators=[django.core.validators.RegexValidator(regex='^CVE-[0-9]{4}-[0-9]{4,19}$')])),
                ('serial', models.PositiveIntegerField(default=1)),
                ('date_updated', models.DateTimeField(default=None, null=True)),
                ('date_reserved', models.DateTimeField(default=None, null=True)),
                ('date_published', models.DateTimeField(default=None, null=True)),
                ('local_timestamp', models.DateTimeField(auto_now_add=True)),
                ('triaged', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.CharField(default='en', max_length=16, validators=[django.core.validators.RegexValidator('^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$')])),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=4096)),
            ],
        ),
        migrations.CreateModel(
            name='NixChannel',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('staging_branch', models.CharField(max_length=255)),
                ('channel_branch', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('head_sha1_commit', models.CharField(max_length=255)),
                ('state', models.CharField(choices=[('END_OF_LIFE', 'End of life'), ('DEPRECATED', 'Deprecated'), ('BETA', 'Beta'), ('STABLE', 'Stable'), ('UNSTABLE', 'Unstable'), ('STAGING', 'Staging')], max_length=11)),
                ('release_version', models.CharField(max_length=255, null=True)),
                ('repository', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NixDerivation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.CharField(max_length=255)),
                ('derivation_path', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('system', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='NixLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spdx_id', models.CharField(max_length=255, unique=True)),
                ('deprecated', models.BooleanField()),
                ('free', models.BooleanField()),
                ('full_name', models.CharField(max_length=255, null=True)),
                ('short_name', models.CharField(max_length=255, null=True)),
                ('redistributable', models.BooleanField()),
                ('url', models.URLField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NixMaintainer',
            fields=[
                ('github_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('github', models.CharField(max_length=200, unique=True)),
                ('email', models.CharField(max_length=200, null=True)),
                ('matrix', models.CharField(max_length=200, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NixOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('output_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='NixPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_double', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='NixSourceProvenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualifier', models.CharField(max_length=255)),
                ('source', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='NixStorePathOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_path', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('short_name', models.CharField(default=None, max_length=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='ProgramFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='ProgramRoutine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=4096)),
            ],
        ),
        migrations.CreateModel(
            name='SupportingMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_type', models.CharField(max_length=256)),
                ('base64', models.BooleanField(default=False)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('affected', 'affected'), ('unaffected', 'unaffected'), ('unknown', 'unknown')], default='unknown', max_length=10)),
                ('version_type', models.CharField(max_length=128, null=True)),
                ('version', models.CharField(max_length=1024, null=True)),
                ('less_than', models.CharField(max_length=1024, null=True)),
                ('less_equal', models.CharField(max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=2048)),
                ('name', models.CharField(max_length=512)),
                ('tags', models.ManyToManyField(to='shared.tag')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cwe_id', models.CharField(max_length=9, null=True, validators=[django.core.validators.RegexValidator('^CWE-[1-9][0-9]*$')])),
                ('_type', models.CharField(max_length=128, null=True)),
                ('description', models.ManyToManyField(to='shared.description')),
                ('references', models.ManyToManyField(to='shared.reference')),
            ],
        ),
        migrations.CreateModel(
            name='NixpkgsIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('code', models.CharField(max_length=32)),
                ('status', models.CharField(choices=[('U', 'unknown'), ('A', 'affected'), ('NA', 'notaffected'), ('O', 'notforus'), ('W', 'wontfix')], default='U', max_length=2)),
                ('cve', models.ManyToManyField(to='shared.cverecord')),
                ('derivations', models.ManyToManyField(to='shared.nixderivation')),
                ('description', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shared.description')),
            ],
        ),
        migrations.CreateModel(
            name='NixpkgsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.TextField()),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shared.nixpkgsissue')),
            ],
        ),
        migrations.CreateModel(
            name='NixpkgsAdvisory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issues', models.ManyToManyField(to='shared.nixpkgsissue')),
            ],
        ),
        migrations.CreateModel(
            name='NixEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('commit_sha1', models.CharField(max_length=255)),
                ('state', models.CharField(choices=[('COMPLETED', 'Completed'), ('WAITING', 'Waiting to be started'), ('IN_PROGRESS', 'In progress'), ('CRASHED', 'Crashed'), ('FAILED', 'Failed')], max_length=11)),
                ('attempt', models.IntegerField(default=0)),
                ('failure_reason', models.TextField(null=True)),
                ('elapsed', models.FloatField(null=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='shared.nixchannel')),
            ],
        ),
        migrations.CreateModel(
            name='NixDerivationOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('derivation_path', models.CharField(max_length=255)),
                ('outputs', models.ManyToManyField(to='shared.nixoutput')),
            ],
        ),
        migrations.CreateModel(
            name='NixDerivationMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('known_vulnerabilities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), default=list, size=None)),
                ('insecure', models.BooleanField()),
                ('available', models.BooleanField()),
                ('broken', models.BooleanField()),
                ('unfree', models.BooleanField()),
                ('unsupported', models.BooleanField()),
                ('homepage', models.URLField(null=True)),
                ('description', models.TextField(null=True)),
                ('main_program', models.CharField(max_length=255, null=True)),
                ('position', models.URLField(null=True)),
                ('licenses', models.ManyToManyField(to='shared.nixlicense')),
                ('maintainers', models.ManyToManyField(to='shared.nixmaintainer')),
                ('source_provenances', models.ManyToManyField(to='shared.nixsourceprovenance')),
            ],
        ),
        migrations.AddField(
            model_name='nixderivation',
            name='dependencies',
            field=models.ManyToManyField(to='shared.nixderivationoutput'),
        ),
        migrations.AddField(
            model_name='nixderivation',
            name='metadata',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='derivation', to='shared.nixderivationmeta'),
        ),
        migrations.AddField(
            model_name='nixderivation',
            name='outputs',
            field=models.ManyToManyField(to='shared.nixstorepathoutput'),
        ),
        migrations.AddField(
            model_name='nixderivation',
            name='parent_evaluation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='derivations', to='shared.nixevaluation'),
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(max_length=64)),
                ('content', models.JSONField()),
                ('scenarios', models.ManyToManyField(to='shared.description')),
            ],
        ),
        migrations.CreateModel(
            name='Impact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capec_id', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('^CAPEC-[1-9][0-9]{0,4}$')])),
                ('description', models.ManyToManyField(to='shared.description')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('description', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shared.description')),
            ],
        ),
        migrations.AddField(
            model_name='description',
            name='media',
            field=models.ManyToManyField(to='shared.supportingmedia'),
        ),
        migrations.AddField(
            model_name='cverecord',
            name='assigner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned', to='shared.organization'),
        ),
        migrations.AddField(
            model_name='cverecord',
            name='requester',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested', to='shared.organization'),
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_type', models.CharField(choices=[('finder', 'finder'), ('reporter', 'reporter'), ('analyst', 'analyst'), ('coordinator', 'coordinator'), ('remediation developer', 'remediation developer'), ('remediation reviewer', 'remediation reviewer'), ('remediation verifier', 'remediation_verifier'), ('tool', 'tool'), ('sponsor', 'sponsor'), ('other', 'other')], default='finder', max_length=21)),
                ('description', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shared.description')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shared.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_type', models.CharField(choices=[('cna', 'CVE Numbering Authority'), ('adp', 'Authorized Data Publisher')], default='cna', max_length=3)),
                ('title', models.CharField(default=None, max_length=256, null=True)),
                ('date_assigned', models.DateTimeField(default=None, null=True)),
                ('date_public', models.DateTimeField(default=None, null=True)),
                ('source', models.JSONField(default=dict)),
                ('affected', models.ManyToManyField(to='shared.affectedproduct')),
                ('configurations', models.ManyToManyField(related_name='container_configurations', to='shared.description')),
                ('credits', models.ManyToManyField(to='shared.credit')),
                ('cve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shared.cverecord')),
                ('descriptions', models.ManyToManyField(to='shared.description')),
                ('exploits', models.ManyToManyField(related_name='container_exploits', to='shared.description')),
                ('metrics', models.ManyToManyField(to='shared.metric')),
                ('problem_types', models.ManyToManyField(to='shared.problemtype')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shared.organization')),
                ('references', models.ManyToManyField(to='shared.reference')),
                ('solutions', models.ManyToManyField(related_name='container_solutions', to='shared.description')),
                ('tags', models.ManyToManyField(to='shared.tag')),
                ('timeline', models.ManyToManyField(to='shared.event')),
                ('workarounds', models.ManyToManyField(related_name='container_workarounds', to='shared.description')),
            ],
        ),
        migrations.AddField(
            model_name='affectedproduct',
            name='cpes',
            field=models.ManyToManyField(to='shared.cpe'),
        ),
        migrations.AddField(
            model_name='affectedproduct',
            name='modules',
            field=models.ManyToManyField(to='shared.module'),
        ),
        migrations.AddField(
            model_name='affectedproduct',
            name='platforms',
            field=models.ManyToManyField(to='shared.platform'),
        ),
        migrations.AddField(
            model_name='affectedproduct',
            name='program_files',
            field=models.ManyToManyField(to='shared.programfile'),
        ),
        migrations.AddField(
            model_name='affectedproduct',
            name='program_routines',
            field=models.ManyToManyField(to='shared.programroutine'),
        ),
        migrations.AddField(
            model_name='affectedproduct',
            name='versions',
            field=models.ManyToManyField(to='shared.version'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixchannel',
            trigger=pgtrigger.compiler.Trigger(name='pgpubsub_ae5b1', sql=pgtrigger.compiler.UpsertTriggerSql(declare='DECLARE payload TEXT;', func="\n            \n            payload := json_build_object(\n                'app', 'shared',\n                'model', 'NixChannel',\n                'old', row_to_json(OLD),\n                'new', row_to_json(NEW)\n              );\n        \n            \n            perform pg_notify('pgpubsub_ae5b1', payload);\n            RETURN NEW;\n        ", hash='e4f38cbd82ee07621ae9d61e3a672c6d36a49aa4', operation='INSERT', pgid='pgtrigger_pgpubsub_ae5b1_eb186', table='shared_nixchannel', when='AFTER')),
        ),
        migrations.AlterUniqueTogether(
            name='nixevaluation',
            unique_together={('channel', 'commit_sha1')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixevaluation',
            trigger=pgtrigger.compiler.Trigger(name='pgpubsub_aa9f7', sql=pgtrigger.compiler.UpsertTriggerSql(declare='DECLARE payload TEXT;', func="\n            \n            payload := json_build_object(\n                'app', 'shared',\n                'model', 'NixEvaluation',\n                'old', row_to_json(OLD),\n                'new', row_to_json(NEW)\n              );\n        \n            \n            INSERT INTO pgpubsub_notification (channel, payload)\n            VALUES ('pgpubsub_aa9f7', to_json(payload::text));\n        \n            perform pg_notify('pgpubsub_aa9f7', payload);\n            RETURN NEW;\n        ", hash='25db610c183b644bb790893fdd3c4df4cbe1ccf3', operation='INSERT', pgid='pgtrigger_pgpubsub_aa9f7_77b01', table='shared_nixevaluation', when='AFTER')),
        ),
    ]
